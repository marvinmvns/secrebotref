import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
dotenv.config();

const OLLAMA_HOST_DEFAULT = 'http://127.0.0.1:11434';

// ===================== CONFIGURA√á√ïES =====================
const CONFIG = {
  mongo: {
    uri: 'mongodb://admin:admin@127.0.0.1:27017/',
    dbName: 'sched',
    collectionName: 'schedv2'
  },
  server: {
    port: 3000
  },
  scheduler: {
    interval: 30000,
    maxAttempts: 3,
    retryDelay: 2 * 60 * 60 * 1000,
    concurrency: 5,
    dynamic: {
      enabled: false,
      min: 1,
      max: 10,
      cpuThreshold: 0.7,
      memThreshold: 0.8
    }
  },
  queues: {
    llmConcurrency: 2,
    whisperConcurrency: 1,
    memoryThresholdGB: 4,
    memoryCheckInterval: 1000
  },
  llm: {
    model: 'granite3.2:latest',
    imageModel: 'llava:7b',
    maxTokens: 3000,
    host: OLLAMA_HOST_DEFAULT
  },
  audio: {
    sampleRate: 16000,
    model: 'medium',
    language: 'pt'
  },
  // Novas configura√ß√µes para ElevenLabs
  elevenlabs: {
    apiKey: '',
    voiceId: '',
    modelId: 'eleven_multilingual_v2',
    stability: 0.5,
    similarityBoost: 0.75
  },
  // Configura√ß√µes para TTS local usando Piper
  piper: {
    enabled: false,
    executable: 'piper',
    model: ''
  },
  video: {
    ytdlpPath: 'yt-dlp'
  },
  calorieApi: {
    url: 'https://api.api-ninjas.com/v1/nutrition?query=',
    key: ''
  },
  google: {
    clientId: '',
    clientSecret: '',
    redirect: 'http://localhost:3000/oauth2callback'
  },
  // Configura√ß√µes para login no LinkedIn
  linkedin: {
    user: '',
    pass: '',
    liAt: '',
    timeoutMs: 30000
  }
};

const CONFIG_DESCRIPTIONS = {
  'mongo.uri': 'URI de conex√£o com o MongoDB',
  'mongo.dbName': 'Nome do banco de dados',
  'mongo.collectionName': 'Cole√ß√£o onde os lembretes s√£o armazenados',
  'server.port': 'Porta do servidor web',
  'scheduler.interval': 'Intervalo (ms) para verificar agendamentos',
  'scheduler.maxAttempts': 'Tentativas m√°ximas de envio de um lembrete',
  'scheduler.retryDelay': 'Atraso (ms) entre novas tentativas',
  'scheduler.concurrency': 'N√∫mero de envios simult√¢neos',
  'scheduler.dynamic.enabled': 'Ativa ajuste autom√°tico de concorr√™ncia',
  'scheduler.dynamic.min': 'Concorr√™ncia m√≠nima din√¢mica',
  'scheduler.dynamic.max': 'Concorr√™ncia m√°xima din√¢mica',
  'scheduler.dynamic.cpuThreshold': 'Limite de uso de CPU para reduzir carga',
  'scheduler.dynamic.memThreshold': 'Limite de uso de mem√≥ria para reduzir carga',
  'queues.llmConcurrency': 'Tarefas de IA em paralelo',
  'queues.whisperConcurrency': 'Processos de transcri√ß√£o em paralelo',
  'queues.memoryThresholdGB': 'Mem√≥ria (GB) para pausar filas',
  'queues.memoryCheckInterval': 'Intervalo (ms) de checagem de mem√≥ria',
  'llm.model': 'Modelo de linguagem usado',
  'llm.imageModel': 'Modelo para vis√£o computacional',
  'llm.maxTokens': 'Tokens m√°ximos por resposta',
  'llm.host': 'Endere√ßo do servidor Ollama',
  'audio.sampleRate': 'Taxa de amostragem do √°udio',
  'audio.model': 'Modelo Whisper',
  'audio.language': 'Idioma padr√£o das transcri√ß√µes',
  'elevenlabs.apiKey': 'Chave da API ElevenLabs',
  'elevenlabs.voiceId': 'ID de voz ElevenLabs',
  'elevenlabs.modelId': 'Modelo de TTS ElevenLabs',
  'elevenlabs.stability': 'Estabilidade da voz',
  'elevenlabs.similarityBoost': 'Similaridade da voz',
  'piper.enabled': 'Ativa TTS local Piper',
  'piper.executable': 'Execut√°vel do Piper',
  'piper.model': 'Modelo do Piper',
  'video.ytdlpPath': 'Caminho para o execut√°vel yt-dlp',
  'calorieApi.url': 'URL da API de calorias',
  'calorieApi.key': 'Chave da API de calorias',
  'google.clientId': 'Client ID do Google',
  'google.clientSecret': 'Client Secret do Google',
  'google.redirect': 'URL de redirecionamento OAuth',
  'linkedin.user': 'Usu√°rio do LinkedIn',
  'linkedin.pass': 'Senha do LinkedIn',
  'linkedin.liAt': 'Cookie li_at',
  'linkedin.timeoutMs': 'Timeout do LinkedIn (ms)'
};

const CONFIG_ENV_MAP = {
  'mongo.uri': 'MONGO_URI',
  'server.port': 'PORT',
  'scheduler.interval': 'SCHED_INTERVAL',
  'scheduler.maxAttempts': 'SCHED_MAX_ATTEMPTS',
  'scheduler.retryDelay': 'SCHED_RETRY_DELAY',
  'scheduler.concurrency': 'SCHED_CONCURRENCY',
  'scheduler.dynamic.enabled': 'DYNAMIC_CONCURRENCY',
  'scheduler.dynamic.min': 'SCHED_DYNAMIC_MIN',
  'scheduler.dynamic.max': 'SCHED_MAX_CONCURRENCY',
  'scheduler.dynamic.cpuThreshold': 'SCHED_CPU_THRESHOLD',
  'scheduler.dynamic.memThreshold': 'SCHED_MEM_THRESHOLD',
  'queues.llmConcurrency': 'LLM_CONCURRENCY',
  'queues.whisperConcurrency': 'WHISPER_CONCURRENCY',
  'queues.memoryThresholdGB': 'QUEUE_MEM_THRESHOLD_GB',
  'queues.memoryCheckInterval': 'MEM_CHECK_INTERVAL',
  'llm.model': 'LLM_MODEL',
  'llm.imageModel': 'LLM_IMAGE_MODEL',
  'llm.maxTokens': 'LLM_MAX_TOKENS',
  'audio.sampleRate': 'AUDIO_SAMPLE_RATE',
  'audio.model': 'WHISPER_MODEL',
  'audio.language': 'AUDIO_LANGUAGE',
  'elevenlabs.apiKey': 'ELEVENLABS_API_KEY',
  'elevenlabs.voiceId': 'ELEVENLABS_VOICE_ID',
  'elevenlabs.modelId': 'ELEVENLABS_MODEL_ID',
  'elevenlabs.stability': 'ELEVENLABS_STABILITY',
  'elevenlabs.similarityBoost': 'ELEVENLABS_SIMILARITY',
  'piper.enabled': 'PIPER_ENABLED',
  'piper.executable': 'PIPER_EXECUTABLE',
  'piper.model': 'PIPER_MODEL',
  'video.ytdlpPath': 'YTDLP_PATH',
  'calorieApi.url': 'CALORIE_API_URL',
  'calorieApi.key': 'CALORIE_API_KEY',
  'google.clientId': 'GOOGLE_CLIENT_ID',
  'google.clientSecret': 'GOOGLE_CLIENT_SECRET',
  'google.redirect': 'GOOGLE_REDIRECT',
  'linkedin.user': 'LINKEDIN_USER',
  'linkedin.pass': 'LINKEDIN_PASS',
  'linkedin.liAt': 'LINKEDIN_LI_AT',
  'linkedin.timeoutMs': 'LINKEDIN_TIMEOUT_MS'
};

// ===================== CONSTANTES =====================
const COMMANDS = {
  AJUDA: '!ajuda',
  DEEP: '!deep',
  AGENDA: '!agendabot',
  TRANSCREVER: '!transcrever',
  FOTO: '!foto',
  CALORIAS: '!calorias',
  LISTAR: '!listaragendamentos',
  MENU: '!menu',
  LINKEDIN: '!linkedin',
  DELETAR: '!deletaragendamento',
  VOZ: '!voz', // Novo comando para alternar resposta por voz
  RECURSO: "!recurso",
  RESUMIR: '!resumir',
  RESUMIRVIDEO: '!resumirvideo',
  IMPORTAR_AGENDA: '!importaragenda',
  VOLTAR: '!voltar'
};

// Atalhos num√©ricos para menu principal
const NUMERIC_SHORTCUTS = {
  '1': COMMANDS.AJUDA,
  '2': COMMANDS.AGENDA,
  '3': COMMANDS.LISTAR,
  '4': COMMANDS.DELETAR,
  '5': COMMANDS.DEEP,
  '6': COMMANDS.TRANSCREVER,
  '7': COMMANDS.FOTO,
  '8': COMMANDS.CALORIAS,
  '9': COMMANDS.LINKEDIN,
  '10': COMMANDS.VOZ,
  '11': COMMANDS.RECURSO,
  '12': COMMANDS.RESUMIR,
  '13': COMMANDS.IMPORTAR_AGENDA,
  '14': COMMANDS.RESUMIRVIDEO,
  '0': COMMANDS.VOLTAR
};

const CHAT_MODES = {
  ASSISTANT: 'assistant',
  AGENDABOT: 'agendabot',
  TRANSCRICAO: 'transcricao',
  LINKEDIN: 'linkedin',
  DELETAR: 'deletar',
  RESUMIR: 'resumir'
};

// Atualizar mensagem do menu para incluir a op√ß√£o de voz
const MENU_MESSAGE = `ü§ñ *Bem-vindo!* Escolha uma op√ß√£o:\n\n1Ô∏è‚É£ ${COMMANDS.AJUDA} - Ajuda
2Ô∏è‚É£ ${COMMANDS.AGENDA} - Agendar lembrete
3Ô∏è‚É£ ${COMMANDS.LISTAR} - Listar lembretes
4Ô∏è‚É£ ${COMMANDS.DELETAR} - Remover lembrete
5Ô∏è‚É£ ${COMMANDS.DEEP} - Chatbot
6Ô∏è‚É£ ${COMMANDS.TRANSCREVER} - Transcrever √°udio
7Ô∏è‚É£ ${COMMANDS.FOTO} - Descrever imagem
8Ô∏è‚É£ ${COMMANDS.CALORIAS} - Estimar calorias
9Ô∏è‚É£ ${COMMANDS.LINKEDIN} - Analisar LinkedIn
üîü ${COMMANDS.VOZ} - Alternar voz/texto
1Ô∏è‚É£1Ô∏è‚É£ ${COMMANDS.RECURSO} - Recursos do sistema
1Ô∏è‚É£2Ô∏è‚É£ ${COMMANDS.RESUMIR} - Resumir texto/arquivo
1Ô∏è‚É£3Ô∏è‚É£ ${COMMANDS.IMPORTAR_AGENDA} - Importar eventos
1Ô∏è‚É£4Ô∏è‚É£ ${COMMANDS.RESUMIRVIDEO} - Resumir v√≠deo do YouTube
0Ô∏è‚É£ ${COMMANDS.VOLTAR} - Voltar`;

const MODE_MESSAGES = {
  [CHAT_MODES.ASSISTANT]: `ü§ñ *Modo Assistente Ativado!*\n\n‚ú® Agora posso ajud√°-lo com qualquer pergunta ou tarefa.\nüí¨ Digite sua mensagem ou envie um √°udio!\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  [CHAT_MODES.AGENDABOT]: `üìÖ *Modo Agendamento Ativado!*\n\nüìù Me diga o que voc√™ quer agendar e quando.\nüó£Ô∏è Voc√™ pode digitar ou enviar um √°udio!\n\nüí° Exemplo: "Lembrar de reuni√£o amanh√£ √†s 14h"\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  [CHAT_MODES.TRANSCRICAO]: `üé§ *Modo Transcri√ß√£o Ativado!*\n\nüéôÔ∏è Envie um √°udio para eu transcrever em texto.\nüìù O √°udio ser√° convertido automaticamente!\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  [CHAT_MODES.LINKEDIN]: `üíº *Modo LinkedIn Ativado!*\n\nüîó Envie o link do perfil que deseja analisar.\nüìä Vou estruturar as informa√ß√µes para voc√™!\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
  [CHAT_MODES.DELETAR]: `üóëÔ∏è *Modo Deletar Agendamento*\n\nAguarde enquanto busco seus agendamentos...`,
  [CHAT_MODES.RESUMIR]: `üìë *Modo Resumo Ativado!*\n\nEnvie o texto ou arquivo que deseja resumir.\nUse !resumirvideo <link> para v√≠deos do YouTube.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
};

const SUCCESS_MESSAGES = {
  SCHEDULE_CREATED: `‚úÖ *Compromisso Agendado com Sucesso!*\n\nüìÖ Seu lembrete foi salvo e ser√° enviado no hor√°rio programado.\n‚è∞ Voc√™ receber√° a mensagem automaticamente!\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  SCHEDULE_DELETED: (message, dateTime) => `‚úÖ *Agendamento Deletado com Sucesso!*\n\nüóëÔ∏è Removido: ${message}\nüìÖ Data/Hora: ${dateTime}\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  TRANSCRIPTION_COMPLETE: `‚úÖ *Transcri√ß√£o Conclu√≠da!*\n\nüìù O texto acima √© a transcri√ß√£o do seu √°udio.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
  // Novas mensagens para o toggle de voz
  VOICE_ENABLED: `üó£Ô∏è Respostas por voz *ativadas*! Usarei √°udio para responder sempre que poss√≠vel.
üîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
  VOICE_DISABLED: `üí¨ Respostas por voz *desativadas*! Usarei apenas texto para responder.
üîô Para voltar ao menu: ${COMMANDS.VOLTAR}`
};

const ERROR_MESSAGES = {
  GENERIC: `‚ùå *Erro ao processar sua solicita√ß√£o*\n\nüòî Desculpe, algo deu errado. Por favor, tente novamente.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  NO_SCHEDULES: `üì≠ *Nenhum agendamento encontrado*\n\nüí° Use o comando ${COMMANDS.AGENDA} para criar um novo!\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  INVALID_NUMBER: `‚ùå *N√∫mero inv√°lido!*\n\nüî¢ Por favor, escolha um n√∫mero v√°lido da lista.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  AUDIO_REQUIRED: `üé§ *√Åudio necess√°rio!*\n\nüìé Por favor, envie um √°udio para transcrever.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,

  IMAGE_REQUIRED: `üì∏ *Imagem necess√°ria!*\n\nüìé Por favor, envie uma imagem junto com o comando.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
  TEXT_OR_FILE_REQUIRED: `üìù *Texto ou arquivo necess√°rio!*\n\nEnvie uma mensagem de texto ou anexe um PDF, TXT, DOCX ou CSV com o comando.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
  UNSUPPORTED_FILE: `üìé *Tipo de arquivo n√£o suportado!*\n\nUse apenas PDF, TXT, DOCX ou CSV.\n\nüîô Para voltar ao menu: ${COMMANDS.VOLTAR}`,
  // Novo erro para falha no TTS
  TTS_FAILED: `üîá Desculpe, n√£o consegui gerar a resposta em √°udio. Enviando em texto.
üîô Para voltar ao menu: ${COMMANDS.VOLTAR}`
};

const PROMPTS = {
  agenda: (date) => `
Voc√™ √© um assistente chamado Marvin Agenda.
Seu objetivo √© ajudar o usu√°rio a agendar compromissos.
A data e hora atuais s√£o: ${date}.
Quando o usu√°rio quiser agendar um compromisso, voc√™ deve coletar os dados obrigat√≥rios "message" e "scheduledTime" (os √∫nicos obrigat√≥rios para o agendamento), completando os demais campos conforme o exemplo abaixo.
Quando todos os dados forem fornecidos, responda apenas com o JSON estruturado:

{
  "message": "mensagem_de_texto",
  "status": "approved",
  "scheduledTime": {
    "$date": "data_no_formato_ISO8601"
  },
  "expiryTime": {
    "$date": "data_no_formato_ISO8601"
  },
  "sentAt": null,
  "attempts": 0,
  "lastAttemptAt": null
}

Importante: sempre retorne apenas o JSON, sem explica√ß√µes extras, e use o formato ISO8601 para datas.
  `,
  assistant: (date) => `
Voc√™ √© um assistente virtual amig√°vel e prestativo.
Responda de forma √∫til, clara e concisa.
Use emojis quando apropriado para tornar a conversa mais agrad√°vel.
Data atual: ${date}.
  `,
  linkedin: `
Analise o texto bruto extra√≠do de um perfil do LinkedIn e produza um resumo organizado com as informa√ß√µes mais relevantes.
Use emojis para destacar as se√ß√µes.
  `,
  imageDescription: `
Descreva a imagem de forma detalhada e clara:
  `,
  calorieEstimation: `
Identifique os alimentos presentes na imagem e responda SOMENTE com um JSON no formato:
{"foods":["alimento1","alimento2"]}
  `,
  audioCommandMapping: (transcription) => `
Dada a transcri√ß√£o "${transcription}", qual comando do menu a seguir ela mais provavelmente representa?
Responda APENAS com o comando (ex: !ajuda, !deep, !agendabot, !transcrever, !foto, !calorias, !listaragendamentos, !menu, !linkedin, !deletaragendamento, !voz, !recurso, !voltar) ou "INVALIDO" se n√£o corresponder a nenhum.
Comandos dispon√≠veis: !ajuda, !deep, !agendabot, !transcrever, !foto, !calorias, !listaragendamentos, !menu, !linkedin, !deletaragendamento, !voz, !recurso, !voltar
  `,
  videoSummary: (date) => `
Voc√™ √© um assistente especializado em resumir v√≠deos.
Forne√ßa um resumo em portugu√™s estruturado por t√≥picos, com no m√°ximo 50 linhas ao todo.
Cada t√≥pico deve destacar de forma concisa as principais ideias do v√≠deo.
Data atual: ${date}.
  `
};


function updateConfigFromEnv() {
  CONFIG.mongo.uri = process.env.MONGO_URI || CONFIG.mongo.uri;
  CONFIG.server.port = process.env.PORT || CONFIG.server.port;

  CONFIG.scheduler.interval = parseInt(process.env.SCHED_INTERVAL || CONFIG.scheduler.interval, 10);
  CONFIG.scheduler.maxAttempts = parseInt(process.env.SCHED_MAX_ATTEMPTS || CONFIG.scheduler.maxAttempts, 10);
  CONFIG.scheduler.retryDelay = parseInt(process.env.SCHED_RETRY_DELAY || CONFIG.scheduler.retryDelay, 10);
  CONFIG.scheduler.concurrency = parseInt(process.env.SCHED_CONCURRENCY || CONFIG.scheduler.concurrency, 10);

  CONFIG.scheduler.dynamic.enabled = process.env.DYNAMIC_CONCURRENCY === 'true' || CONFIG.scheduler.dynamic.enabled;
  CONFIG.scheduler.dynamic.min = parseInt(process.env.SCHED_DYNAMIC_MIN || CONFIG.scheduler.dynamic.min, 10);
  CONFIG.scheduler.dynamic.max = parseInt(process.env.SCHED_MAX_CONCURRENCY || CONFIG.scheduler.dynamic.max, 10);
  CONFIG.scheduler.dynamic.cpuThreshold = parseFloat(process.env.SCHED_CPU_THRESHOLD || CONFIG.scheduler.dynamic.cpuThreshold);
  CONFIG.scheduler.dynamic.memThreshold = parseFloat(process.env.SCHED_MEM_THRESHOLD || CONFIG.scheduler.dynamic.memThreshold);

  CONFIG.queues.llmConcurrency = parseInt(process.env.LLM_CONCURRENCY || CONFIG.queues.llmConcurrency, 10);
  CONFIG.queues.whisperConcurrency = parseInt(process.env.WHISPER_CONCURRENCY || CONFIG.queues.whisperConcurrency, 10);
  CONFIG.queues.memoryThresholdGB = parseInt(process.env.QUEUE_MEM_THRESHOLD_GB || CONFIG.queues.memoryThresholdGB, 10);
  CONFIG.queues.memoryCheckInterval = parseInt(process.env.MEM_CHECK_INTERVAL || CONFIG.queues.memoryCheckInterval, 10);

  CONFIG.audio.sampleRate = parseInt(process.env.AUDIO_SAMPLE_RATE || CONFIG.audio.sampleRate, 10);
  CONFIG.audio.model = process.env.WHISPER_MODEL || CONFIG.audio.model;
  CONFIG.audio.language = process.env.AUDIO_LANGUAGE || CONFIG.audio.language;

  CONFIG.llm.model = process.env.LLM_MODEL || CONFIG.llm.model;
  CONFIG.llm.imageModel = process.env.LLM_IMAGE_MODEL || CONFIG.llm.imageModel;
  CONFIG.llm.maxTokens = parseInt(process.env.LLM_MAX_TOKENS || CONFIG.llm.maxTokens, 10);
  if (process.env.OLLAMA_TIMEOUT_MS) {
    process.env.UNDICI_HEADERS_TIMEOUT = process.env.OLLAMA_TIMEOUT_MS;
    process.env.UNDICI_BODY_TIMEOUT = process.env.OLLAMA_TIMEOUT_MS;
  }

  CONFIG.elevenlabs.apiKey = process.env.ELEVENLABS_API_KEY || CONFIG.elevenlabs.apiKey;
  CONFIG.elevenlabs.voiceId = process.env.ELEVENLABS_VOICE_ID || CONFIG.elevenlabs.voiceId;
  CONFIG.elevenlabs.modelId = process.env.ELEVENLABS_MODEL_ID || CONFIG.elevenlabs.modelId;
  CONFIG.elevenlabs.stability = parseFloat(process.env.ELEVENLABS_STABILITY || CONFIG.elevenlabs.stability);
  CONFIG.elevenlabs.similarityBoost = parseFloat(process.env.ELEVENLABS_SIMILARITY || CONFIG.elevenlabs.similarityBoost);

  CONFIG.piper.enabled = process.env.PIPER_ENABLED === 'true' || !!process.env.PIPER_MODEL || CONFIG.piper.enabled;
  CONFIG.piper.executable = process.env.PIPER_EXECUTABLE || CONFIG.piper.executable;
  CONFIG.piper.model = process.env.PIPER_MODEL || CONFIG.piper.model;

  CONFIG.video.ytdlpPath = process.env.YTDLP_PATH || CONFIG.video.ytdlpPath;

  CONFIG.calorieApi.url = process.env.CALORIE_API_URL || CONFIG.calorieApi.url;
  CONFIG.calorieApi.key = process.env.CALORIE_API_KEY || CONFIG.calorieApi.key;

  CONFIG.google.clientId = process.env.GOOGLE_CLIENT_ID || CONFIG.google.clientId;
  CONFIG.google.clientSecret = process.env.GOOGLE_CLIENT_SECRET || CONFIG.google.clientSecret;
  CONFIG.google.redirect = process.env.GOOGLE_REDIRECT || CONFIG.google.redirect;

  CONFIG.linkedin.user = process.env.LINKEDIN_USER || CONFIG.linkedin.user;
  CONFIG.linkedin.pass = process.env.LINKEDIN_PASS || CONFIG.linkedin.pass;
  CONFIG.linkedin.liAt = process.env.LINKEDIN_LI_AT || CONFIG.linkedin.liAt;
  CONFIG.linkedin.timeoutMs = parseInt(process.env.LINKEDIN_TIMEOUT_MS || CONFIG.linkedin.timeoutMs, 10);
}

function applyConfig(obj) {
  const merge = (t, s) => {
    for (const k of Object.keys(s)) {
      const v = s[k];
      if (v && typeof v === 'object' && !Array.isArray(v)) {
        if (!t[k]) t[k] = {};
        merge(t[k], v);
      } else {
        t[k] = v;
      }
    }
  };
  merge(CONFIG, obj);
}

export {
  CONFIG,
  COMMANDS,
  NUMERIC_SHORTCUTS,
  CHAT_MODES,
  MENU_MESSAGE,
  MODE_MESSAGES,
  SUCCESS_MESSAGES,
  ERROR_MESSAGES,
  PROMPTS,
  CONFIG_DESCRIPTIONS,
  CONFIG_ENV_MAP,
  __dirname,
  updateConfigFromEnv,
  applyConfig
};
